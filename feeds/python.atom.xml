<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Prakash Pandey</title><link href="http://prakashpandey.in/" rel="alternate"></link><link href="http://prakashpandey.in/feeds/python.atom.xml" rel="self"></link><id>http://prakashpandey.in/</id><updated>2017-02-17T10:39:00+01:00</updated><entry><title>HTTP mocking was never easy before</title><link href="http://prakashpandey.in/2017/Feb/17/http-mocking-was-never-easy-before.html" rel="alternate"></link><updated>2017-02-17T10:39:00+01:00</updated><author><name>Prakash Pandey</name></author><id>tag:prakashpandey.in,2017-02-17:2017/Feb/17/http-mocking-was-never-easy-before.html</id><summary type="html">&lt;p&gt;Everytime I worked on api related stuff, testing became nightmare. Tried multiple mock libraries and they all took decent amount of time to make it work. Some libraries like &lt;a href="https://github.com/getsentry/responses"&gt;responses&lt;/a&gt; makes it easy but works only for requests. I was looking for something which can streamline http mock and works with both requests and urllib.&lt;/p&gt;
&lt;p&gt;Finally found something which fits the need - &lt;a href="https://github.com/kevin1024/vcrpy"&gt;vcrpy&lt;/a&gt;. Allows you to record your test suite's HTTP interactions and replay them during future test runs for fast, deterministic, accurate tests. It's a port of ruby vcr project.&lt;/p&gt;
&lt;p&gt;&lt;img alt="vcrpy" src="http://prakashpandey.in/images/vcrpy.png" /&gt;&lt;/p&gt;
&lt;p&gt;Concept is pretty simple, vcrpy records cassette(actual request/response dumped to a yaml file) during first run and then uses it from the next run.&lt;/p&gt;
&lt;h1&gt;Quick Example?&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;vcr&lt;/span&gt;

&lt;span class="nd"&gt;@vcr.use_cassette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;fixtures/vcr_cassettes/weather.yaml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_weather&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Test weather api.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://samples.openweathermap.org/data/2.5/weather?q=London,uk&amp;amp;appid=b1b15e88fa797225412429c1c50c122a1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run the test and you will see it has recorded cassette to &lt;code&gt;fixtures/vcr_cassettes/weather.yaml&lt;/code&gt;, something like this -&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;interactions&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;request&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;body&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;null&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;headers&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;Connection&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;close&lt;/span&gt;&lt;span class="p-Indicator"&gt;]&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;Host&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;samples.openweathermap.org&lt;/span&gt;&lt;span class="p-Indicator"&gt;]&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;User-Agent&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Python-urllib/2.7&lt;/span&gt;&lt;span class="p-Indicator"&gt;]&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;method&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;GET&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;uri&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;http://samples.openweathermap.org/data/2.5/weather?q=London,uk&amp;amp;appid=b1b15e88fa797225412429c1c50c122a1&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;response&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;body&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!!python/unicode&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{&amp;quot;coord&amp;quot;:{&amp;quot;lon&amp;quot;:-0.13,&amp;quot;lat&amp;quot;:51.51},&amp;quot;weather&amp;quot;:[{&amp;quot;id&amp;quot;:300,&amp;quot;main&amp;quot;:&amp;quot;Drizzle&amp;quot;,&amp;quot;description&amp;quot;:&amp;quot;light&lt;/span&gt;
        &lt;span class="s"&gt;intensity&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;drizzle&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;09d&amp;quot;}],&amp;quot;base&amp;quot;:&amp;quot;stations&amp;quot;,&amp;quot;main&amp;quot;:{&amp;quot;temp&amp;quot;:280.32,&amp;quot;pressure&amp;quot;:1012,&amp;quot;humidity&amp;quot;:81,&amp;quot;temp_min&amp;quot;:279.15,&amp;quot;temp_max&amp;quot;:281.15},&amp;quot;visibility&amp;quot;:10000,&amp;quot;wind&amp;quot;:{&amp;quot;speed&amp;quot;:4.1,&amp;quot;deg&amp;quot;:80},&amp;quot;clouds&amp;quot;:{&amp;quot;all&amp;quot;:90},&amp;quot;dt&amp;quot;:1485789600,&amp;quot;sys&amp;quot;:{&amp;quot;type&amp;quot;:1,&amp;quot;id&amp;quot;:5091,&amp;quot;message&amp;quot;:0.0103,&amp;quot;country&amp;quot;:&amp;quot;GB&amp;quot;,&amp;quot;sunrise&amp;quot;:1485762037,&amp;quot;sunset&amp;quot;:1485794875},&amp;quot;id&amp;quot;:2643743,&amp;quot;name&amp;quot;:&amp;quot;London&amp;quot;,&amp;quot;cod&amp;quot;:200}&amp;#39;&lt;/span&gt;&lt;span class="p-Indicator"&gt;}&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;headers&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;cache-control&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;max-age=0,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;private,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;must-revalidate&amp;#39;&lt;/span&gt;&lt;span class="p-Indicator"&gt;]&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;connection&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;close&lt;/span&gt;&lt;span class="p-Indicator"&gt;]&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;content-type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;application/json; charset=utf-8&lt;/span&gt;&lt;span class="p-Indicator"&gt;]&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;date&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Fri,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;17&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Feb&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;2017&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;05:30:56&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;GMT&amp;#39;&lt;/span&gt;&lt;span class="p-Indicator"&gt;]&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;etag&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;W/&amp;quot;e70c27085ed41de5321252b16c9582fe&amp;quot;&lt;/span&gt;&lt;span class="p-Indicator"&gt;]&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;server&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;openresty/1.9.7.1&lt;/span&gt;&lt;span class="p-Indicator"&gt;]&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;x-content-type-options&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;nosniff&lt;/span&gt;&lt;span class="p-Indicator"&gt;]&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;x-frame-options&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;SAMEORIGIN&lt;/span&gt;&lt;span class="p-Indicator"&gt;]&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;x-request-id&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;c38b25a2-3216-493a-a754-3813acb66765&lt;/span&gt;&lt;span class="p-Indicator"&gt;]&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;x-runtime&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0.003599&amp;#39;&lt;/span&gt;&lt;span class="p-Indicator"&gt;]&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;x-xss-protection&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;1; mode=block&lt;/span&gt;&lt;span class="p-Indicator"&gt;]&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;status&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;code&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;200&lt;/span&gt;&lt;span class="p-Indicator"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;message&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;OK&lt;/span&gt;&lt;span class="p-Indicator"&gt;}&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;version&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And you are done! Run the test again, it wont hit the api server ;-)&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;vcrpy is in active development and lot of new features are coming in. It has made HTTP mocking easier for me. There are lot more advanced features like implementing your own request matcher, hiding sensitive data from request/response etc. For further reading go to the &lt;a href="https://vcrpy.readthedocs.io/en/latest"&gt;vcrpy documentation&lt;/a&gt;&lt;/p&gt;</summary><category term="mock"></category><category term="python"></category><category term="api"></category></entry><entry><title>Access SOAP web services using python suds</title><link href="http://prakashpandey.in/2015/Aug/13/access-soap-web-services-using-python-suds.html" rel="alternate"></link><updated>2015-08-13T02:02:00+02:00</updated><author><name>Prakash Pandey</name></author><id>tag:prakashpandey.in,2015-08-13:2015/Aug/13/access-soap-web-services-using-python-suds.html</id><summary type="html">&lt;p&gt;Last week I worked on tryton integration with FedEx shipping. FedEx implements SOAP communication interface, that means sending SOAP requests from python to FedEx server. During the course I gave up on &lt;a href="https://github.com/fulfilio/py-fedex"&gt;py-fedex&lt;/a&gt; api just because it was getting hard to maintain and my lack of knowledge on python SOAP client libraries. Library I used for SOAP request and response was &lt;a href="https://fedorahosted.org/suds"&gt;suds&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Why suds?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Most popular SOAP client library in python world!&lt;/li&gt;
&lt;li&gt;Its newer and pythonic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most people recommend suds and you would find code references easily. You can install it directly from pypi:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install suds
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;How commuication happens with SOAP?&lt;/h1&gt;
&lt;p&gt;Every web service which communicates through SOAP exposes a &lt;a href="https://en.wikipedia.org/wiki/Web_Services_Description_Language"&gt;WSDL&lt;/a&gt;. WSDL is a document that describes a Web service and also tells you how to access and use its methods. Commuication happens over HTTP and request/response content is XML.
This XML should be valid as per WSDL.&lt;/p&gt;
&lt;h1&gt;An Example!&lt;/h1&gt;
&lt;p&gt;Let's say we want to communicate a SOAP based web service &lt;a href="http://www.webservicex.net/geoipservice.asmx"&gt;geoip&lt;/a&gt;. WSDL is available at &lt;a href="http://www.webservicex.net/geoipservice.asmx?WSDL"&gt;http://www.webservicex.net/geoipservice.asmx?WSDL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First initialize suds client and print it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Client&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://www.webservicex.net/geoipservice.asmx?WSDL&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; print client

Suds &lt;span class="o"&gt;(&lt;/span&gt; https://fedorahosted.org/suds/ &lt;span class="o"&gt;)&lt;/span&gt;  version: 0.4 GA  build: R699-20100913

Service &lt;span class="o"&gt;(&lt;/span&gt; GeoIPService &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;tns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.webservicex.net/&amp;quot;&lt;/span&gt;
   Prefixes &lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="nv"&gt;ns0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://www.webservicex.net/&amp;quot;&lt;/span&gt;
   Ports &lt;span class="o"&gt;(&lt;/span&gt;2&lt;span class="o"&gt;)&lt;/span&gt;:
      &lt;span class="o"&gt;(&lt;/span&gt;GeoIPServiceSoap&lt;span class="o"&gt;)&lt;/span&gt;
         Methods &lt;span class="o"&gt;(&lt;/span&gt;2&lt;span class="o"&gt;)&lt;/span&gt;:
            GetGeoIP&lt;span class="o"&gt;(&lt;/span&gt;xs:string IPAddress, &lt;span class="o"&gt;)&lt;/span&gt;
            GetGeoIPContext&lt;span class="o"&gt;()&lt;/span&gt;
         Types &lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;:
            GeoIP
      &lt;span class="o"&gt;(&lt;/span&gt;GeoIPServiceSoap12&lt;span class="o"&gt;)&lt;/span&gt;
         Methods &lt;span class="o"&gt;(&lt;/span&gt;2&lt;span class="o"&gt;)&lt;/span&gt;:
            GetGeoIP&lt;span class="o"&gt;(&lt;/span&gt;xs:string IPAddress, &lt;span class="o"&gt;)&lt;/span&gt;
            GetGeoIPContext&lt;span class="o"&gt;()&lt;/span&gt;
         Types &lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;:
            GeoIP
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It shows the available services, ports, methods and types. There are two ports: &lt;code&gt;GeoIPServiceSoap&lt;/code&gt; and &lt;code&gt;GeoIPServiceSoap12&lt;/code&gt;. Method  &lt;code&gt;GetGeoIP&lt;/code&gt; has IPAddress parameter of string type. Lets make a request for IP &lt;code&gt;8.8.8.8&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="c"&gt;# Set client&amp;#39;s port if there are multiple ports available.&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; client.set_options&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GeoIPServiceSoap&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; client.service.GetGeoIP&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;IPAddress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;8.8.8.8&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; print response
&lt;span class="o"&gt;(&lt;/span&gt;GeoIP&lt;span class="o"&gt;){&lt;/span&gt;
   &lt;span class="nv"&gt;ReturnCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 1
   &lt;span class="nv"&gt;IP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;8.8.8.8&amp;quot;&lt;/span&gt;
   &lt;span class="nv"&gt;ReturnCodeDetails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Success&amp;quot;&lt;/span&gt;
   &lt;span class="nv"&gt;CountryName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;United States&amp;quot;&lt;/span&gt;
   &lt;span class="nv"&gt;CountryCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;USA&amp;quot;&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Response object is GeoIP type and you can access attributes using dot notation.&lt;/p&gt;
&lt;h1&gt;Debugging&lt;/h1&gt;
&lt;p&gt;You can debug all the requests by enabling logger as follows, it will show you the exact request/response in xml format.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;suds.client&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This blog explains the basics how to interact with SOAP using suds. There are complex requests, authentication etc. and suds one page documentation clearly explains those in detail.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fedorahosted.org/suds/wiki/Documentation"&gt;Suds Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="SOAP"></category><category term="python"></category><category term="suds"></category></entry><entry><title>Load testing with Locust</title><link href="http://prakashpandey.in/2015/Aug/06/load-testing-with-locust.html" rel="alternate"></link><updated>2015-08-06T10:56:00+02:00</updated><author><name>Prakash Pandey</name></author><id>tag:prakashpandey.in,2015-08-06:2015/Aug/06/load-testing-with-locust.html</id><summary type="html">&lt;p&gt;Few days back I was searching for a load testing library in python. Actually I wanted
to test on how many concurrent user my WSGI application can handle. I came across this tool
&lt;a href="http://locust.io/"&gt;locust&lt;/a&gt;, found very useful in my case. Well documented and very good extensible api.&lt;/p&gt;
&lt;h1&gt;So what is Locust?&lt;/h1&gt;
&lt;p&gt;As per locust documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Locust is an easy-to-use, distributed, user load testing tool.
Intended for load testing web sites (or other systems) and figuring
out how many concurrent users a system can handle.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It comes with a very good command line and web interface.
You can define taskset - what a user gonna do with the system and locust can swarm your
system with concurrent users doing the task.&lt;/p&gt;
&lt;h1&gt;How did I tested?&lt;/h1&gt;
&lt;p&gt;Locust can be installed from pypi:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install locustio
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I had a WSGI application running on &lt;code&gt;localhost:5000&lt;/code&gt; and a locustfile as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;locust&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpLocust&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TaskSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TaskSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; on_start is called when a Locust start before any task is scheduled&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/database&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;common.db.login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;params&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="n"&gt;catch_response&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Not able to login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="nd"&gt;@task&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/database&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;method&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;model.party.party.search&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;params&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[[]]]&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="n"&gt;catch_response&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpLocust&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;task_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tasks&lt;/span&gt;
    &lt;span class="n"&gt;min_wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;
    &lt;span class="n"&gt;max_wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;started locust with &lt;code&gt;locust --host=http://localhost:5000&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Locust Web Interface" src="http://prakashpandey.in/images/Screenshot-2015-08-06-17.38.03.png" /&gt;&lt;/p&gt;
&lt;p&gt;Opened locust's web interface on browser (&lt;code&gt;localhost:8069&lt;/code&gt;) and simulated load from there.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Locust is awesome. It can be easily blended with python unittest or pytest. Now I am planning to explore it
more and add locustfile to my WSGI application tests :)&lt;/p&gt;</summary><category term="python"></category><category term="testing"></category><category term="locust"></category></entry></feed>